import pandas as pd

from snakemake.utils import validate

VERSION = "2.0.1-DEV"

validate(config, "schemas/config.yaml")
pepfile: config["pepfile"]
pepschema: "schemas/pep.yaml"
workdir: pep.config["qutrna"]["output_dir"]

include: "rules/common.smk"
include: "rules/samtools.smk"
include: "rules/parasail.smk"
include: "rules/jacusa2.smk"
include: "rules/sec_structure.smk"
include: "rules/plot.smk"


def target_alignment():
  conds = set()
  for cond in pep.config["qutrna"]["contrasts"]:
    conds.add(cond["cond1"])
    conds.add(cond["cond2"])
  conds = list(conds)

  tbl = pep.sample_table
  tbl = tbl.set_index("condition")
  tbl = tbl.loc[conds].explode(["base_calling", READS])

  targets = []
  for row in tbl.itertuples():
    targets.extend(
        expand("results/plots/alignment/sample~{sample}/subsample~{subsample}/{bc}_score.pdf",
               sample=row.sample_name,
               subsample=row.subsample_name,
               bc=row.base_calling))

  return targets


def target_sprinzl():
  return "results/seq_to_sprinzl_filtered.tsv"


def target_trna_plots():
  targets = []

  for conds in pep.config["qutrna"]["contrasts"]:
    cond1 = conds["cond1"]
    cond2 = conds["cond2"]

    dname =  "results/plots/cond1~{cond1}/cond2~{cond2}/{plot_id}"

    for plot in config["plots"]:
      targets.append(
          expand(dname,
                 cond1=cond1, cond2=cond2,
                 plot_id=plot["id"]))

  return targets


def target_all():
  targets = []
  targets.extend(target_trna_plots())

  if READS == "fastq":
    targets.extend(target_alignment())

  return targets

###

rule all:
  input: target_all()


rule alignment:
  input: target_alignment()


rule sprinzl:
  input: target_sprinzl()


rule trna_plots:
  input: target_trna_plots()
