# FIX FROM
# https://python-jsonschema.readthedocs.io/en/stable/faq/#why-doesn-t-my-schema-s-default-property-set-the-default-on-my-instance
from jsonschema import Draft202012Validator, validators
import os
from snakemake import workflow


def extend_with_default(validator_class):
  validate_properties = validator_class.VALIDATORS["properties"]

  def set_defaults(validator, properties, instance, schema):
    for property, subschema in properties.items():
      if "default" in subschema:
        instance.setdefault(property,subschema["default"])

    for error in validate_properties(
            validator,properties,instance,schema,
    ):
      yield error

  return validators.extend(
    validator_class,{"properties": set_defaults},
  )
DefaultValidatingValidator = extend_with_default(Draft202012Validator)

import yaml
from snakemake.io import expand

VERSION = "2.0.0-DEV-8"

# validate schemas
with open(workflow.basedir + "/schemas/config.yaml") as stream:
  config_schema = yaml.safe_load(stream)
  DefaultValidatingValidator(config_schema).validate(config)
pepfile: config["pepfile"]
pepschema: "schemas/pep.yaml"

# manage snakemake includes
include: "rules/common.smk"
include: "rules/filter.smk"
include: "rules/samtools.smk"
include: "rules/parasail.smk"
include: "rules/jacusa2.smk"
include: "rules/sec_structure.smk"
include: "rules/plot.smk"
include: "rules/info.smk"


global FILTERS_APPLIED
global TBL
global READS
global COORDS
global REF_FASTA
global REF_FASTA_REVERSED
global CM
global SPRINZL_MODE
global SPRINZL


def target_include():
  targets = [
    REF_FASTA
  ]
  if COORDS == "sprinzl":
    if SPRINZL_MODE == "cm":
      targets.append(CM)
    targets.append(SPRINZL)
  if READS == "fastq":
    targets.append(REF_FASTA_REVERSED)
    for row in TBL.itertuples():
      targets.extend(
        expand("data/fastq/sample~{sample}/subsample~{subsample}/{bc}.fastq.gz",
          sample=row.sample_name,
          subsample=row.subsample_name,
          bc=row.base_calling))
  if READS == "bam":
    for row in TBL.itertuples():
      targets.extend(
        expand("data/fastq/sample~{sample}/subsample~{subsample}/{bc}.sorted.bam",
          sample=row.sample_name,
          subsample=row.subsample_name,
          bc=row.base_calling))

  return targets


def target_alignment():
  targets = []
  for row in TBL.itertuples():
    targets.extend(
        expand("results/plots/alignment/sample~{sample}/subsample~{subsample}/{bc}/alignment_score.pdf",
               sample=row.sample_name,
               subsample=row.subsample_name,
               bc=row.base_calling))

  return targets


# TODO diagnostic plot
def target_sprinzl():
  return ["results/seq_to_sprinzl_filtered.tsv", ]


def target_trna_plots():
  targets = []

  # TODO add raw/init
  bam_types = ["final"]
  if config["call_filtered"] and FILTERS_APPLIED:
    bam_types += [f"filtered-{f}" for f in FILTERS_APPLIED]

  for conds in pep.config["qutrna2"]["contrasts"]:
    cond1 = conds["cond1"]
    cond2 = conds["cond2"]

    dname =  "results/plots/cond1~{cond1}/cond2~{cond2}/{plot_id}/bam~{bam_type}"
    for plot in config["plots"]:
      targets.append(
          expand(dname,
                 cond1=cond1, cond2=cond2,
                 plot_id=plot["id"], bam_type=bam_types))

  return targets


def target_all():
  targets = []
  targets.extend(target_trna_plots())

  if READS == "fastq":
    targets.extend(target_alignment())

  return targets


# TODO add more feature plots
def target_read_feature_plots():
  targets = []
  types = ["condition", "sample", "subsample"]
  targets.extend(expand("results/plots/read_count/{type}.pdf", type=types))
  targets.extend(expand("results/plots/read_length/{type}.pdf", type=types))
  if READS == "fastq":
    targets.extend(expand("results/plots/alignment/threshold_summary.pdf"))

  return targets


def target_info():
  targets = [
      "info/config.yaml",
      "info/pep.yaml",
      "info/version.txt",
      "info/opts.txt"]

  if workflow.configfiles:
    targets += [os.path.join("info/configfiles", f"{i}_{os.path.basename(cf)}") for i, cf in enumerate(workflow.configfiles, start=1)]

  return targets

###############################################################################
# possible targets for snakemake
###############################################################################
# defaul rule
rule all:
  input: target_all() + target_info() + target_read_feature_plots()


rule alignment:
  input: target_alignment() + target_info() + target_read_feature_plots()


rule sprinzl:
  input: target_sprinzl() + target_info()


rule trna_plots:
  input: target_trna_plots() + target_info()


rule read_count_plots:
  input: target_read_feature_plots() + target_info()


rule info:
  input: target_info()

rule include:
  input: target_include()


